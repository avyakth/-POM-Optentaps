package techtablet;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.net.MalformedURLException;import java.net.URL;import java.util.Properties;import java.util.concurrent.TimeUnit;import org.openqa.selenium.UnexpectedAlertBehaviour;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.chrome.ChromeOptions;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.firefox.FirefoxProfile;import org.openqa.selenium.firefox.internal.ProfilesIni;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.remote.CapabilityType;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import io.appium.java_client.AppiumDriver;import io.appium.java_client.MobileElement;import io.appium.java_client.android.AndroidDriver;public class Driver { private static RemoteWebDriver threadDriver1; private String deviceName; private String platformName; private String platformVersion; private String activityName; private String appWaitActivity; private String appPath; private String browserName; private String browserVersion; private String OS; private String OSVersion; private String launchURL; private String typeOfDriver; private String port; private String driverPath; private String appEnvironment; // Added 1/1/17 -Dale ThreadLocal<RemoteWebDriver> threadDriver; private DesiredCapabilities capabilities = null; public String getDeviceName() {  return deviceName; } public void setDeviceName(String deviceName) {  this.deviceName = deviceName; } public String getPlatformName() {  return platformName; } public void setPlatformName(String platformName) {  this.platformName = platformName; } public String getPlatformVersion() {  return platformVersion; } public void setPlatformVersion(String platformVersion) {  this.platformVersion = platformVersion; } public String getActivityName() {  return activityName; } public void setActivityName(String activityName) {  this.activityName = activityName; } public String getAppPath() {  return appPath; } public void setAppPath(String appPath) {  this.appPath = appPath; } public DesiredCapabilities getCapabilities() {  return capabilities; } public void setCapabilities(DesiredCapabilities capabilities) {  this.capabilities = capabilities; } public String getAppWaitActivity() {  return appWaitActivity; } public void setAppWaitActivity(String appWaitActivity) {  this.appWaitActivity = appWaitActivity; } public String getBrowserName() {  return browserName; } public void setBrowserName(String browserName) {  this.browserName = browserName; } public String getBrowserVersion() {  return browserVersion; } public void setBrowserVersion(String browserVersion) {  this.browserVersion = browserVersion; } public String getOS() {  return OS; } public void setOS(String oS) {  OS = oS; } public String getOSVersion() {  return OSVersion; } public void setOSVersion(String oSVersion) {  OSVersion = oSVersion; } public String getLaunchURL() {  return launchURL; } public void setLaunchURL(String launchURL) {  this.launchURL = launchURL; } public String getTypeOfDriver() {  return typeOfDriver; } public void setTypeOfDriver(String typeOfDriver) {  this.typeOfDriver = typeOfDriver; } // New for app environment management -Dale public String getappEnvironment() {  return appEnvironment; } // New for app environment management -Dale public void setappEnvironment(String appEnvironment) {  this.appEnvironment = appEnvironment; } public WebDriver startDriver(String appConfig) {  WebDriver driver = null;  try {   Properties prop = new Properties();   prop.load(new FileInputStream(appConfig));   String port = annotation.PORT;   if (port == null || port == "") {    port = prop.getProperty("port");   }   this.deviceName = annotation.DEVICE_NAME;   if (deviceName == null || deviceName == "") {    deviceName = prop.getProperty("device_name");   }   // Added 1/1/17 -Dale   this.appEnvironment = prop.getProperty("appEnvironment");   this.appPath = prop.getProperty("projectPath");   this.activityName = prop.getProperty("appActivity");   this.appWaitActivity = prop.getProperty("appWaitActivity");   this.platformName = prop.getProperty("platformName");   this.platformVersion = prop.getProperty("platformVersion");   this.browserName = prop.getProperty("browseName");   this.browserVersion = prop.getProperty("browserVersion");   this.OS = prop.getProperty("OS");   this.OSVersion = prop.getProperty("OSVersion");   this.launchURL = prop.getProperty("launchURL");   this.typeOfDriver = prop.getProperty("typeOfDriver");   this.driverPath = prop.getProperty("driverPath");   String url = "http://127.0.0.1:" + port + "/wd/hub";   if (this.typeOfDriver.equalsIgnoreCase("Android")) {    URL serveraddress = new URL(url);    capabilities = DesiredCapabilities.android();    System.out.println("Device Name" + this.deviceName);    capabilities.setCapability("deviceName", this.deviceName);    capabilities.setCapability("udid", this.deviceName);    File app = new File(this.appPath);    capabilities.setCapability("app", app);    capabilities.setCapability("appActivity", this.activityName);    capabilities.setCapability("appWaitActivity", this.appWaitActivity);    capabilities.setCapability("noReset", true);    capabilities.setCapability("platformName", this.platformName);    capabilities.setCapability("platformVersion", this.platformVersion);    // added 1/6/17 -Dale    capabilities.setCapability("appEnvironment", this.appEnvironment);    // added to disable appium full reset -Dale    capabilities.setCapability("fullReset", false);    // added to hide keyboard -Dale    capabilities.setCapability("unicodeKeyboard", true);    capabilities.setCapability("resetKeyboard", true);    driver = new AndroidDriver(serveraddress, this.capabilities);   }   else if (this.typeOfDriver.equalsIgnoreCase("web")     && (launchURL != null && (!launchURL.contentEquals("")))) {    URL serveraddress = new URL(url);    if (this.browserName.equalsIgnoreCase("chrome")) {     capabilities = DesiredCapabilities.android();     capabilities.setCapability("browserName", "Chrome");     capabilities.setCapability("chromedriverExecutable", this.driverPath);    } else if (this.browserName.equalsIgnoreCase("ie")) {     capabilities = DesiredCapabilities.android();     capabilities.setCapability("browserName", "IE");    } else if (this.browserName.equalsIgnoreCase("firefox")) {     capabilities = DesiredCapabilities.android();     capabilities.setCapability("browserName", "Firefox");    }    capabilities.setCapability("deviceName", this.deviceName);    capabilities.setCapability("platformName", this.platformName);    capabilities.setCapability("platformVersion", this.platformVersion);    capabilities.setCapability("browser_version", this.browserVersion);    capabilities.setCapability("os", this.OS);    capabilities.setCapability("os_version", this.OSVersion);    capabilities.setCapability("browserstack.debug", "true");    driver = new RemoteWebDriver(serveraddress, this.capabilities);    if (launchURL != null && !launchURL.contentEquals(""))     driver.get(launchURL);   } else if (this.typeOfDriver.equalsIgnoreCase("Desktop")     && (launchURL != null && (!launchURL.contentEquals("")))) {    if (this.browserName.equalsIgnoreCase("chrome")) {     File file = new File(this.driverPath);     System.setProperty("webdriver.chrome.driver", this.driverPath);     DesiredCapabilities caps = DesiredCapabilities.chrome();     //capabilities.setCapability("browserName", "chrome");     //capabilities.setCapability("chromedriverExecutable", this.driverPath);     threadDriver = new ThreadLocal<RemoteWebDriver>();     threadDriver.set(new RemoteWebDriver(new URL("http://114.9.172.21:4444/wd/hub"), caps));     System.out.println("IE Browser Launched in " + "http://114.9.172.21:4444/wd/hub " +" Thread "+Thread.currentThread().getId());     driver = threadDriver.get();     Driver.setDriver(threadDriver.get());    // driver = new ChromeDriver();    } else if (this.browserName.equalsIgnoreCase("ie")) {     File file = new File(this.driverPath);     System.setProperty("webdriver.ie.driver", file.getAbsolutePath());     DesiredCapabilities caps = DesiredCapabilities.internetExplorer();     threadDriver = new ThreadLocal<RemoteWebDriver>();          threadDriver.set(new RemoteWebDriver(new URL("http://114.9.172.21:4444/wd/hub"), caps));     System.out.println("IE Browser Launched in " + "http://114.9.172.21:4444/wd/hub " +" Thread "+Thread.currentThread().getId());     driver = threadDriver.get();     Driver.setDriver(threadDriver.get());     //driver = new InternetExplorerDriver();    } else if (this.browserName.equalsIgnoreCase("firefox")) {     DesiredCapabilities caps = DesiredCapabilities.firefox();     ThreadLocal<RemoteWebDriver> threadDriver; threadDriver = new ThreadLocal<RemoteWebDriver>();     threadDriver.set(new RemoteWebDriver(new URL("http://114.9.172.21:4444/wd/hub"), caps));     System.out.println("Firefox Browser Launched in " + "http://114.9.172.21:4444/wd/hub " +" Thread "+Thread.currentThread().getId());     driver = threadDriver.get();                 System.out.println("Test method executing on thread with id: " +Thread.currentThread().getId());    }    driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);    driver.manage().window().maximize();    driver.get(launchURL);   }  } catch (MalformedURLException e) {   System.out.println(e.getMessage());  } catch (FileNotFoundException e) {   // TODO Auto-generated catch block   System.out.println(e.getMessage());  } catch (IOException e) {   // TODO Auto-generated catch block   e.printStackTrace();  } catch (Exception e) {   // TODO Auto-generated catch block   e.printStackTrace();  }  finally {   // annotation.driverStarted = true;  }  return driver; }  public static RemoteWebDriver getDriver(){  return threadDriver1; }  public  static void setDriver(RemoteWebDriver remoteWebDriver){  threadDriver1 = remoteWebDriver; }}

package techtablet;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.lang.reflect.Method;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Collection;import java.util.List;import java.util.Properties;import java.util.concurrent.TimeUnit;import jxl.read.biff.BiffException;import jxl.write.WriteException;import jxl.write.biff.RowsExceededException;import org.openqa.selenium.WebDriver;import org.testng.annotations.AfterSuite;import org.testng.annotations.BeforeSuite;import techtablet.CommonUtils.reportgenerator;import techtablet.DBAccessor.DataBaseModule;import techtablet.Logger.LoggingModule;import techtablet.Parser.CommonFunctionParser;import techtablet.Parser.FeatureParser;import TestDataManagement.TestDataManagement;import cucumber.api.Scenario;import cucumber.api.java.After;import cucumber.api.java.Before;import cucumber.api.java.en.Given;public class annotation { // creating the objects public static boolean driverStarted = false; public WebDriver driver; public Driver d; public TestDataManagement jobAssignObj; public static Scenario scenario; public  String scenarioName; public static String featureName = ""; public static String feName; static boolean start = true; Boolean status; protected static final String PORT = System.getProperty("port", ""); protected static final String DEVICE_NAME = System.getProperty(   "device_name", ""); public static final String USER_ID = System.getProperty("UserId", "apasokan"); public static final String PASSWORD = System.getProperty("password", ""); public static final String PROFILE = System.getProperty("profile", ""); public static final String APP_CONFIG_FILE_NAME = System.getProperty(   "AppConfigFileName", "DefaultConfig") + ".properties";  // commented the below section since below parameters are read from properties file   /*protected static final String PORT = "4723";  protected static final String DEVICE_NAME = "192.168.1.169:5555";  public static final String USER_ID = "v146029";  public static final String PASSWORD = "******";  public static final String PROFILE = "MIDAT";*/ // use when running from ECLIPSE - change to the appropriate values    static String selectedApp = ""; static String mailTo = ""; static String mailCc = ""; static String launchURL = ""; static String Argument = ""; public static int criticalCount=0; public static String mailFilepath; FeatureStringElements stringElements; public static String currentDir; public static String reportDel; public static String appName = ""; public static String cal1; public static String appID; public static Calendar cal; public static DateFormat dateFormat; public static String reportFilepath; public static String tag; public static Collection<String> tags; public static int stepFailCnt; public static int stepPassCnt; String comments = ""; static boolean repStatus; List <String>stepsFailed = new ArrayList<String>(); DataBaseModule db;  public annotation() {     // Initiating the DRIVER  // cleared at the end of test in performTestcase function -Dale  if (driverStarted == false) {   Properties prop = new Properties();   try {    DataBaseModule anndb = new DataBaseModule();    anndb.setDb(anndb);    db = anndb.getDb();    // Create Driver instance...    d = new Driver();    driver = d.startDriver(APP_CONFIG_FILE_NAME);        //driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);    LoggingModule.formatLogger();   } catch (Exception e) {    // TODO Auto-generated catch block    System.out.println(e.getMessage());   }  } }  @Before public void before(Scenario scenario) {  scenarioName = scenario.getName();  System.out.println("Scenario is " + scenarioName);  tags = scenario.getSourceTagNames();  for (String name : tags) {   tag = name.toString();  }  stepFailCnt = 0;  stepPassCnt = 0;  comments = "Errors at" + "\n ";  comments += "\n ";  /*   * String[] featureSplit = feName.split("@"); featureName =   * featureSplit[1];   */ } @Given("^\"([^\"]*)\"$") public void performTestcase(String featureString) throws Exception {  try {  // CommonFunctionParser cmn = new CommonFunctionParser();   //FeatureParser parse = new FeatureParser();   // parse through input xml and add into hash map   CommonFunctionParser.parseData();   if (featureString.contains("config")) {    String[] config_id = null;    // Extracting the Method and Object to be performed from the    // feature    // string    FeatureStringElements config = FeatureParser      .inputParsed(featureString,driver,db);    config_id = config.getInputs();    jobAssignObj = new TestDataManagement(config_id[0],db);   }   // Extracting the Method and Object to be performed from the feature   // string   FeatureStringElements stringElements = FeatureParser     .inputParsed(featureString,driver,db);   if (stringElements.getElement() != null     || stringElements.getEvent() != null) {    // dynamic method call from events based on method name    Class thisClass = Class      .forName("techtablet.CommonUtils.CommonFunctions");    Object iClass = thisClass.newInstance();    Class[] param = new Class[1];    param[0] = FeatureStringElements.class;        // get the method    Method thisMethod = thisClass.getDeclaredMethod(      stringElements.getEvent(), param);    Element element = stringElements.getElement();    System.out.println("In featureString "+featureString +"Thread "+ Thread.currentThread().getId());   // System.out.println("element Name "+element.getName()+"Thread "+ Thread.currentThread().getId());   // System.out.println("element Value "+element.getIdValue()+"Thread "+ Thread.currentThread().getId());    /*if (element.getName() == null && stringElements.getEvent()== null){     throw new Exception();    }*/    // call the method    status = (Boolean) thisMethod.invoke(iClass, stringElements);    // Take screen shots    if(!stringElements.getEvent().equalsIgnoreCase("closeBrowser")){    LoggingModule.takeScreenShot(status, stringElements.getEvent(),      stringElements.getElement());    }    if(status == false){     stepFailCnt++;     stepsFailed.clear();     stepsFailed.add(featureString);     for (String stepFailed : stepsFailed) {      comments+="STEP : "+stepFailed+"\n";     }     if (featureString.toUpperCase().contains("CRITICAL")) {      criticalCount++;     }     if (tag.toUpperCase().contentEquals("@PROCEEDNEXTSTEP")) {      return;     } else if (tag.toUpperCase().contentEquals("@TERMINATE")) {      reportgenerator rep = new reportgenerator();      rep.report(repStatus, comments,scenarioName);      mail();      System.exit(0);     }    }    //LoggingModule.logging(status, stringElements.getEvent(),      //stringElements.getElement());    //reportgenerator.report(status, comments );    stepPassCnt++;   }  } catch (Exception e) {   stepFailCnt++;   //status = false;      stepsFailed.clear();   stepsFailed.add(featureString);   for (String stepFailed : stepsFailed) {        comments+="STEP : "+stepFailed+"\n";   }      System.out.println("Exception " + e.getMessage());   e.printStackTrace();      if (featureString.toUpperCase().contains("CRITICAL")) {    criticalCount++;   }   /*    * Collection<String> tags = scenario.getSourceTagNames(); for    * (String tag : tags) { feName = tag.toString(); } String[]    * featureSplit = feName.split("@"); tag = featureSplit[1];    */   System.out.println("tag " + tag);   if (tag.toUpperCase().contentEquals("@PROCEEDNEXTSTEP")) {    return;   } else if (tag.toUpperCase().contentEquals("@TERMINATE")) {    reportgenerator rep = new reportgenerator();    rep.report(repStatus, comments,scenarioName);    mail();    System.exit(0);   }   // throw e;  } finally {   // new for test restarts - override existing session must be set in   // appium server -Dale   // last row in test script must have 'test ends' text in it   if (featureString.contains("test ends")) {    driverStarted = false;   }  } }// end of method public static void mail() {  // TODO Auto-generated method stub  try {      System.out.println("In After junit");   Runtime.getRuntime().exec(     "WScript " + mailFilepath + " " + "\"" + Argument + "\"");  } catch (Exception em) {   em.printStackTrace();  } } public static void repDel() {  // report delete  try {      if (reportDel.toUpperCase().equals("Y")) {    //System.out.println("@BeforeClass");    System.out.println("Existing reports will get deleted since reportDel is Y ");    String filepath = currentDir + "\\" + "Results\\";    File file = new File(filepath);    String[] myFiles;    if (file.exists()) {     if (file.isDirectory()) {      myFiles = file.list();      for (int i = 0; i < myFiles.length; i++) {       File myFile = new File(file, myFiles[i]);       //System.out.println("File : "+ myFile.getAbsolutePath());       System.out.println("File" + (i+1) + " : "         + myFiles[i]);       if (myFiles[i].contains(appName)         && myFiles[i].contains(cal1)) {        System.out.println(" Deleting File" + (i+1)          + " :  " + myFiles[i]);        myFile.delete();       }      }     }    }   } else {    System.out.println("Existing report will get appended");   }  } catch (Exception e) {   // TODO Auto-generated catch block   e.printStackTrace();  } } public static void loadProp(DataBaseModule db0) {  // TODO Auto-generated method stub  try {      System.out.println("Load Prop");      // properties load before class   Properties prop = new Properties();   prop.load(new FileInputStream(APP_CONFIG_FILE_NAME));   appID = prop.getProperty("ApplicationId");   appName = db0.getappName(appID);   System.out.println("appName "+appName);   mailTo = prop.getProperty("mailTo");   mailCc = prop.getProperty("mailCc");   launchURL = prop.getProperty("launchURL");   currentDir = System.getProperty("user.dir");   mailFilepath = currentDir + "\\" + "Mail\\" + "mail.vbs";   reportDel = prop.getProperty("reportDel");   // Calendar instance   cal = Calendar.getInstance();   dateFormat = new SimpleDateFormat("MM_dd_yyyy");   cal1 = dateFormat.format(cal.getTime());      reportFilepath = currentDir + "\\" + "Results\\" + appName     + " Final Report " + cal1 + ".xls";      Argument = appName + "," + mailTo + "," + mailCc + "," + launchURL     + "," + reportFilepath;  } catch (FileNotFoundException e) {   // TODO Auto-generated catch block   System.out.println(e.getMessage());  } catch (IOException e) {   // TODO Auto-generated catch block   System.out.println(e.getMessage());  } catch (Exception e) {   // TODO Auto-generated catch block   e.printStackTrace();  }   }  @After public synchronized void after() throws RowsExceededException, WriteException,   BiffException, IOException {  if (stepFailCnt > 0) {   repStatus = false;  } else {   repStatus = true;  }  reportgenerator rep = new reportgenerator();  rep.report(repStatus, comments,scenarioName); }   }// end of class
