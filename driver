package techtablet;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.net.MalformedURLException;import java.net.URL;import java.util.Properties;import java.util.concurrent.TimeUnit;import org.openqa.selenium.UnexpectedAlertBehaviour;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.chrome.ChromeDriver;import org.openqa.selenium.chrome.ChromeOptions;import org.openqa.selenium.firefox.FirefoxDriver;import org.openqa.selenium.firefox.FirefoxProfile;import org.openqa.selenium.firefox.internal.ProfilesIni;import org.openqa.selenium.ie.InternetExplorerDriver;import org.openqa.selenium.remote.CapabilityType;import org.openqa.selenium.remote.DesiredCapabilities;import org.openqa.selenium.remote.RemoteWebDriver;import io.appium.java_client.AppiumDriver;import io.appium.java_client.MobileElement;import io.appium.java_client.android.AndroidDriver;public class Driver { private static RemoteWebDriver threadDriver1; private String deviceName; private String platformName; private String platformVersion; private String activityName; private String appWaitActivity; private String appPath; private String browserName; private String browserVersion; private String OS; private String OSVersion; private String launchURL; private String typeOfDriver; private String port; private String driverPath; private String appEnvironment; // Added 1/1/17 -Dale ThreadLocal<RemoteWebDriver> threadDriver; private DesiredCapabilities capabilities = null; public String getDeviceName() {  return deviceName; } public void setDeviceName(String deviceName) {  this.deviceName = deviceName; } public String getPlatformName() {  return platformName; } public void setPlatformName(String platformName) {  this.platformName = platformName; } public String getPlatformVersion() {  return platformVersion; } public void setPlatformVersion(String platformVersion) {  this.platformVersion = platformVersion; } public String getActivityName() {  return activityName; } public void setActivityName(String activityName) {  this.activityName = activityName; } public String getAppPath() {  return appPath; } public void setAppPath(String appPath) {  this.appPath = appPath; } public DesiredCapabilities getCapabilities() {  return capabilities; } public void setCapabilities(DesiredCapabilities capabilities) {  this.capabilities = capabilities; } public String getAppWaitActivity() {  return appWaitActivity; } public void setAppWaitActivity(String appWaitActivity) {  this.appWaitActivity = appWaitActivity; } public String getBrowserName() {  return browserName; } public void setBrowserName(String browserName) {  this.browserName = browserName; } public String getBrowserVersion() {  return browserVersion; } public void setBrowserVersion(String browserVersion) {  this.browserVersion = browserVersion; } public String getOS() {  return OS; } public void setOS(String oS) {  OS = oS; } public String getOSVersion() {  return OSVersion; } public void setOSVersion(String oSVersion) {  OSVersion = oSVersion; } public String getLaunchURL() {  return launchURL; } public void setLaunchURL(String launchURL) {  this.launchURL = launchURL; } public String getTypeOfDriver() {  return typeOfDriver; } public void setTypeOfDriver(String typeOfDriver) {  this.typeOfDriver = typeOfDriver; } // New for app environment management -Dale public String getappEnvironment() {  return appEnvironment; } // New for app environment management -Dale public void setappEnvironment(String appEnvironment) {  this.appEnvironment = appEnvironment; } public WebDriver startDriver(String appConfig) {  WebDriver driver = null;  try {   Properties prop = new Properties();   prop.load(new FileInputStream(appConfig));   String port = annotation.PORT;   if (port == null || port == "") {    port = prop.getProperty("port");   }   this.deviceName = annotation.DEVICE_NAME;   if (deviceName == null || deviceName == "") {    deviceName = prop.getProperty("device_name");   }   // Added 1/1/17 -Dale   this.appEnvironment = prop.getProperty("appEnvironment");   this.appPath = prop.getProperty("projectPath");   this.activityName = prop.getProperty("appActivity");   this.appWaitActivity = prop.getProperty("appWaitActivity");   this.platformName = prop.getProperty("platformName");   this.platformVersion = prop.getProperty("platformVersion");   this.browserName = prop.getProperty("browseName");   this.browserVersion = prop.getProperty("browserVersion");   this.OS = prop.getProperty("OS");   this.OSVersion = prop.getProperty("OSVersion");   this.launchURL = prop.getProperty("launchURL");   this.typeOfDriver = prop.getProperty("typeOfDriver");   this.driverPath = prop.getProperty("driverPath");   String url = "http://127.0.0.1:" + port + "/wd/hub";   if (this.typeOfDriver.equalsIgnoreCase("Android")) {    URL serveraddress = new URL(url);    capabilities = DesiredCapabilities.android();    System.out.println("Device Name" + this.deviceName);    capabilities.setCapability("deviceName", this.deviceName);    capabilities.setCapability("udid", this.deviceName);    File app = new File(this.appPath);    capabilities.setCapability("app", app);    capabilities.setCapability("appActivity", this.activityName);    capabilities.setCapability("appWaitActivity", this.appWaitActivity);    capabilities.setCapability("noReset", true);    capabilities.setCapability("platformName", this.platformName);    capabilities.setCapability("platformVersion", this.platformVersion);    // added 1/6/17 -Dale    capabilities.setCapability("appEnvironment", this.appEnvironment);    // added to disable appium full reset -Dale    capabilities.setCapability("fullReset", false);    // added to hide keyboard -Dale    capabilities.setCapability("unicodeKeyboard", true);    capabilities.setCapability("resetKeyboard", true);    driver = new AndroidDriver(serveraddress, this.capabilities);   }   else if (this.typeOfDriver.equalsIgnoreCase("web")     && (launchURL != null && (!launchURL.contentEquals("")))) {    URL serveraddress = new URL(url);    if (this.browserName.equalsIgnoreCase("chrome")) {     capabilities = DesiredCapabilities.android();     capabilities.setCapability("browserName", "Chrome");     capabilities.setCapability("chromedriverExecutable", this.driverPath);    } else if (this.browserName.equalsIgnoreCase("ie")) {     capabilities = DesiredCapabilities.android();     capabilities.setCapability("browserName", "IE");    } else if (this.browserName.equalsIgnoreCase("firefox")) {     capabilities = DesiredCapabilities.android();     capabilities.setCapability("browserName", "Firefox");    }    capabilities.setCapability("deviceName", this.deviceName);    capabilities.setCapability("platformName", this.platformName);    capabilities.setCapability("platformVersion", this.platformVersion);    capabilities.setCapability("browser_version", this.browserVersion);    capabilities.setCapability("os", this.OS);    capabilities.setCapability("os_version", this.OSVersion);    capabilities.setCapability("browserstack.debug", "true");    driver = new RemoteWebDriver(serveraddress, this.capabilities);    if (launchURL != null && !launchURL.contentEquals(""))     driver.get(launchURL);   } else if (this.typeOfDriver.equalsIgnoreCase("Desktop")     && (launchURL != null && (!launchURL.contentEquals("")))) {    if (this.browserName.equalsIgnoreCase("chrome")) {     File file = new File(this.driverPath);     System.setProperty("webdriver.chrome.driver", this.driverPath);     DesiredCapabilities caps = DesiredCapabilities.chrome();     //capabilities.setCapability("browserName", "chrome");     //capabilities.setCapability("chromedriverExecutable", this.driverPath);     threadDriver = new ThreadLocal<RemoteWebDriver>();     threadDriver.set(new RemoteWebDriver(new URL("http://114.9.172.21:4444/wd/hub"), caps));     System.out.println("IE Browser Launched in " + "http://114.9.172.21:4444/wd/hub " +" Thread "+Thread.currentThread().getId());     driver = threadDriver.get();     Driver.setDriver(threadDriver.get());    // driver = new ChromeDriver();    } else if (this.browserName.equalsIgnoreCase("ie")) {     File file = new File(this.driverPath);     System.setProperty("webdriver.ie.driver", file.getAbsolutePath());     DesiredCapabilities caps = DesiredCapabilities.internetExplorer();     threadDriver = new ThreadLocal<RemoteWebDriver>();          threadDriver.set(new RemoteWebDriver(new URL("http://114.9.172.21:4444/wd/hub"), caps));     System.out.println("IE Browser Launched in " + "http://114.9.172.21:4444/wd/hub " +" Thread "+Thread.currentThread().getId());     driver = threadDriver.get();     Driver.setDriver(threadDriver.get());     //driver = new InternetExplorerDriver();    } else if (this.browserName.equalsIgnoreCase("firefox")) {     DesiredCapabilities caps = DesiredCapabilities.firefox();     ThreadLocal<RemoteWebDriver> threadDriver; threadDriver = new ThreadLocal<RemoteWebDriver>();     threadDriver.set(new RemoteWebDriver(new URL("http://114.9.172.21:4444/wd/hub"), caps));     System.out.println("Firefox Browser Launched in " + "http://114.9.172.21:4444/wd/hub " +" Thread "+Thread.currentThread().getId());     driver = threadDriver.get();                 System.out.println("Test method executing on thread with id: " +Thread.currentThread().getId());    }    driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);    driver.manage().window().maximize();    driver.get(launchURL);   }  } catch (MalformedURLException e) {   System.out.println(e.getMessage());  } catch (FileNotFoundException e) {   // TODO Auto-generated catch block   System.out.println(e.getMessage());  } catch (IOException e) {   // TODO Auto-generated catch block   e.printStackTrace();  } catch (Exception e) {   // TODO Auto-generated catch block   e.printStackTrace();  }  finally {   // annotation.driverStarted = true;  }  return driver; }  public static RemoteWebDriver getDriver(){  return threadDriver1; }  public  static void setDriver(RemoteWebDriver remoteWebDriver){  threadDriver1 = remoteWebDriver; }}
